package DAO;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import DTO.BankDTO;

public class BankDAO {

	public BankDTO SelectResult(Connection con, BankDTO dto) {
		
			try{
			

			//5. 결과처리
			//update한 결과를 가져옴
			String sql = "select username,balance from account where username = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, dto.getUsername()); 
			
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			dto = new BankDTO();
			dto.setUsername(rs.getString("username"));
			dto.setBalance(rs.getInt("balance"));

			//6. 사용한 리소스 정리
			rs.close();
			pstmt.close();

		}catch(Exception e){
			//만약 오류가 생기면 오류 출력
			System.out.println(e);
		}

			
		return dto;
	}
	
	public BankDTO UpdateDeposit(Connection con, BankDTO dto) {
		try{
			
			
			//3. SQL문을 실행하기 위한 Statement를 생성한다.
			String sql ="update account set balance = balance + ? where username = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			//sql문에 내가 원하는 문자열을 넣는 작업.
			pstmt.setInt(1, dto.getBalance()); 
			pstmt.setString(2, dto.getUsername()); 
			
			
			//4. Statement 실행!!
			//update 쿼리문 수행
			pstmt.executeUpdate();
			
			//5. 결과처리
			//update한 결과를 가져옴
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, dto.getUsername()); 
			
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			dto = new BankDTO();
			dto.setUsername(rs.getString("username"));
			dto.setBalance(rs.getInt("balance"));

			//6. 사용한 리소스 정리
			rs.close();
			pstmt.close();
			con.close();
			
			
		}catch(Exception e){
			//만약 오류가 생기면 오류 출력
			System.out.println(e);
		}
		
		
		return dto;
	}

	public BankDTO UpdateWithdrawal(Connection con, BankDTO dto) {
		try{
			
			//3. SQL문을 실행하기 위한 Statement를 생성한다.
			String sql ="update account set balance = balance - ? where username = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1, dto.getBalance()); 
			pstmt.setString(2, dto.getUsername()); 
			
			
			//4. Statement 실행!!
			pstmt.executeUpdate();
			
			//5. 결과처리
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, dto.getUsername()); 
			
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			dto = new BankDTO();
			dto.setUsername(rs.getString("username"));
			dto.setBalance(rs.getInt("balance"));

			//6. 사용한 리소스 정리
			rs.close();
			pstmt.close();
			con.close();
			
			
		}catch(Exception e){
			//만약 오류가 생기면 오류 출력
			System.out.println(e);
		}
		
		
		return dto;
	}

	public ArrayList<BankDTO> UpdateTransfer(Connection con, ArrayList<BankDTO> list) {
	
		try{
			
			//3. SQL문을 실행하기 위한 Statement를 생성한다.
			//4. Statement 실행!!
			String sql ="update account set balance = balance - ? where username = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, list.get(0).getBalance()); 
			pstmt.setString(2, list.get(0).getUsername()); 
			pstmt.executeUpdate();
			
			
			sql ="update account set balance = balance + ? where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, list.get(1).getBalance()); 
			pstmt.setString(2, list.get(1).getUsername()); 
			pstmt.executeUpdate();
			
			
			
			//5. 결과처리
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, list.get(0).getUsername());
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			BankDTO dto = new BankDTO();
			dto.setUsername(rs.getString("username"));
			dto.setBalance(rs.getInt("balance"));

			
			
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, list.get(1).getUsername());
			rs = pstmt.executeQuery();
			rs.next();
			BankDTO dto2 = new BankDTO();
			dto2.setUsername(rs.getString("username"));
			dto2.setBalance(rs.getInt("balance"));

			list.clear();
			list.add(dto);
			list.add(dto2);
			
			//6. 사용한 리소스 정리
			rs.close();
			pstmt.close();
			con.close();
			
			
		}catch(Exception e){
			//만약 오류가 생기면 오류 출력
			System.out.println(e);
		}
		
		
		return list;
	}

	public int UpdateDepositTransaction(Connection con, BankDTO dto) {
	
		int result;

		try{
			
			
			//3. SQL문을 실행하기 위한 Statement를 생성한다.
			String sql ="update account set balance = balance + ? where username = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			//sql문에 내가 원하는 문자열을 넣는 작업.
			pstmt.setInt(1, dto.getBalance()); 
			pstmt.setString(2, dto.getUsername()); 
			
			
			//4. Statement 실행!!
			//update 쿼리문 수행
			result = pstmt.executeUpdate();
			
			/*
			//5. 결과처리
			//update한 결과를 가져옴
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, dto.getUsername()); 
			
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			//dto = new BankDTO();
			tempdto.setUsername(rs.getString("username"));
			tempdto.setBalance(rs.getInt("balance"));
			 */
			
			//6. 사용한 리소스 정리
			rs.close();
			pstmt.close();
			//con.close();
			
			
		}catch(Exception e){
			//만약 오류가 생기면 오류 출력
			System.out.println("hi");
			System.out.println(e);
			result=0;
		}
		
		return result;
		
	}
	
	

	public int UpdateWithdrawalTransaction(Connection con, BankDTO dto, BankDTO tempdto) {
		int result;

		try{
			
			//3. SQL문을 실행하기 위한 Statement를 생성한다.
			String sql ="update account set balance = balance - ? where username = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1, dto.getBalance()); 
			pstmt.setString(2, dto.getUsername()); 
			
			
			//4. Statement 실행!!
			result = pstmt.executeUpdate();
			
			//5. 결과처리
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, dto.getUsername()); 
			
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			dto = new BankDTO();
			dto.setUsername(rs.getString("username"));
			dto.setBalance(rs.getInt("balance"));

			//6. 사용한 리소스 정리
			rs.close();
			pstmt.close();
			//con.close();
			
		}catch(Exception e){
			//만약 오류가 생기면 오류 출력
			System.out.println(e);
			result=0;
		}
		return result;
	}

	public int UpdateTransferTransaction(Connection con, ArrayList<BankDTO> list) {
		int result;

	try{
			
			//3. SQL문을 실행하기 위한 Statement를 생성한다.
			//4. Statement 실행!!
			String sql ="update account set balance = balance - ? where username = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, list.get(0).getBalance()); 
			pstmt.setString(2, list.get(0).getUsername()); 
			int result1 = pstmt.executeUpdate();
			
			
			sql ="update account set balance = balance + ? where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, list.get(1).getBalance()); 
			pstmt.setString(2, list.get(1).getUsername()); 
			int result2 = pstmt.executeUpdate();
			
			
			
			//5. 결과처리
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, list.get(0).getUsername());
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			BankDTO dto = new BankDTO();
			dto.setUsername(rs.getString("username"));
			dto.setBalance(rs.getInt("balance"));

			
			
			sql = "select username,balance from account where username = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, list.get(1).getUsername());
			rs = pstmt.executeQuery();
			rs.next();
			BankDTO dto2 = new BankDTO();
			dto2.setUsername(rs.getString("username"));
			dto2.setBalance(rs.getInt("balance"));

			list.clear();
			list.add(dto);
			list.add(dto2);
			
			//6. 사용한 리소스 정리
			rs.close();
			pstmt.close();
			//con.close();
			
			if(result1 ==1 && result2 ==1)
			{
				result= 1;
			}
			else 
			{
				result= 0;
			}
			
		}catch(Exception e){
			//만약 오류가 생기면 오류 출력
			System.out.println(e);
			result = 0;
		}
	
		return result;
	}

		
}

